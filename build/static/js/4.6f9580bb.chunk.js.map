{"version":3,"sources":["components/App.module.css","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","components/contactItem/ContactItem.module.css","redux/contacts/contactsOperations.js","components/contactForm/ContactForm.js","components/contactForm/ContactFormContainer.js","components/filter/Filter.js","components/filter/FilterContainer.js","components/contactItem/ContactItem.js","components/contactItem/ContactItemContainer.js","components/contactList/ContactList.js","components/contactList/ContactListContainer.js","components/contacts/Contacts.js"],"names":["module","exports","axios","defaults","baseURL","name","number","dispatch","contactsActions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","state","useDispatch","useState","setName","setNumber","className","styles","contactForm","onSubmit","e","preventDefault","items","contacts","find","contact","alert","contactsOperations","TextField","style","borderRadius","type","value","onChange","target","marginBottom","Button","variant","color","padding","connect","Filter","onChangeFilter","mapDispatchToProps","changeFilter","contactsSelectors","getFilter","ContactItem","onRemoveContact","listItem","listItemP","listItemButton","onClick","ownProps","itemMove","enter","enterActive","exit","exitActive","ContactList","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","getFillteredContacts","Contacts","this","props","onFetchContacts","paddingLeft","length","sectionTitle","Component","getContacts","dicpatch"],"mappings":"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","file":"static/js/4.6f9580bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionTitle\":\"App_sectionTitle__2Afqb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__YWLkY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__30DeS\",\"enterActive\":\"ContactList_enterActive__36th3\",\"exit\":\"ContactList_exit__2i39N\",\"exitActive\":\"ContactList_exitActive__2v2hW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactItem_listItem__15dKT\",\"listItemP\":\"ContactItem_listItemP__1Tg70\",\"listItemButton\":\"ContactItem_listItemButton__Xi_-0\"};","import axios from 'axios';\nimport contactsActions from './contactsActions';\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(contactsActions.fetchContactRequest());\n\n  axios('/contacts')\n    .then(({ data }) => dispatch(contactsActions.fetchContactSuccess(data)))\n    .catch(error => dispatch(contactsActions.fetchContactError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  dispatch(contactsActions.addContactRequest());\n  axios\n    .post('/contacts', {\n      name,\n      number,\n    })\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch(error => dispatch(contactsActions.addContactError(error)));\n};\n\nconst removeContact = id => dispatch => {\n  dispatch(contactsActions.removeContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\n    .catch(error => dispatch(contactsActions.removeContactError(error)));\n};\n\nexport default { addContact, fetchContacts, removeContact };\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\n\nimport styles from './ContactForm.module.css';\nimport { Button, TextField } from '@material-ui/core';\n\nconst ContactForm = ({ state }) => {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const changeNameHandler = ({ target }) => setName(target.value);\n\n  const [number, setNumber] = useState('');\n  const changeNumberHandler = ({ target }) => setNumber(target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const { items } = state.contacts;\n\n    if (items && items.find(contact => name === contact.name)) {\n      alert('User with this name is already exist');\n    } else {\n      dispatch(contactsOperations.addContact(name, number));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <br />\n        <TextField\n          style={{ borderRadius: 4 }}\n          name=\"name\"\n          type=\"text\"\n          value={name}\n          onChange={changeNameHandler}\n        />\n      </label>\n      <br />\n      <label>\n        Number\n        <br />\n        <TextField\n          style={{ borderRadius: 4, marginBottom: 5 }}\n          name=\"number\"\n          type=\"text\"\n          value={number}\n          onChange={changeNumberHandler}\n        />\n      </label>\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ borderRadius: 4, padding: 4 }}\n        type=\"submit\"\n      >\n        Add contact\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\nimport ContactForm from './ContactForm';\n\nconst mapStateToProps = state => ({\n  state,\n});\n\nexport default connect(mapStateToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField } from '@material-ui/core';\n\nconst Filter = ({ value, onChangeFilter }) => (\n  <form>\n    <label>\n      Find contacts by name\n      <br />\n      <TextField\n        variant=\"outlined\"\n        style={{ borderRadius: 4 }}\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </label>\n  </form>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contactsActions';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport Filter from './Filter';\n\nconst mapStateToProps = state => {\n  return {\n    value: contactsSelectors.getFilter(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  onChangeFilter: contactsActions.changeFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport styles from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\n\nconst ContactItem = ({ contact: { name, number }, onRemoveContact }) => {\n  return (\n    <li className={styles.listItem}>\n      <p className={styles.listItemP}>\n        {name}: {number}\n      </p>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={styles.listItemButton}\n        onClick={onRemoveContact}\n        type=\"button\"\n      >\n        Delete\n      </Button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onRemoveContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\nimport ContactItem from './ContactItem';\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onRemoveContact: () =>\n    dispatch(contactsOperations.removeContact(ownProps.contact.id)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactItem);\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport ContactItem from '../contactItem/ContactItemContainer';\n\nconst itemMove = {\n  enter: styles.enter,\n  enterActive: styles.enterActive,\n  exit: styles.exit,\n  exitActive: styles.exitActive,\n};\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\">\n      {contacts &&\n        contacts.map(contact => (\n          <CSSTransition key={contact.id} timeout={250} classNames={itemMove}>\n            <ContactItem contact={contact} />\n          </CSSTransition>\n        ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport ContactList from './ContactList';\n\nconst mapStateToProps = state => {\n  if (state.contacts) {\n    return {\n      contacts: contactsSelectors.getFillteredContacts(state),\n    };\n  }\n};\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport contactsOperations from '../../redux/contacts/contactsOperations';\nimport styles from '../App.module.css';\nimport ContactForm from '../contactForm/ContactFormContainer';\nimport Filter from '../filter/FilterContainer';\nimport ContactList from '../contactList/ContactListContainer';\n\nclass Contacts extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <div style={{ paddingLeft: '20px' }}>\n        <ContactForm />\n        {contacts && contacts.length > 1 && <Filter />}\n        <h2 className={styles.sectionTitle}>Contacts</h2>\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: contactsSelectors.getContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dicpatch => ({\n  onFetchContacts: () => dicpatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n"],"sourceRoot":""}